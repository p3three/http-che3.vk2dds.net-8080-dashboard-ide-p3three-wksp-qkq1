assessable_lab_2_wk9

<INAGE>
RED
0.840188 0.798440 0.335223 0.553970 0.364784 
0.916195 0.141603 0.242887 0.156679 0.108809 
0.512932 0.296032 0.493583 0.771358 0.400229 
0.352458 0.069755 0.086056 0.890233 0.020023 
0.238280 0.850920 0.375207 0.667724 0.437638 

BLUE
0.394383 0.911647 0.768230 0.477397 0.513401 
0.635712 0.606969 0.137232 0.400944 0.998924 
0.839112 0.637552 0.972775 0.526745 0.891529 
0.807725 0.949327 0.192214 0.348893 0.457702 
0.970634 0.266666 0.760249 0.531606 0.931835 

GREEN
0.783099 0.197551 0.277775 0.628871 0.952230 
0.717297 0.016301 0.804177 0.129790 0.218257 
0.612640 0.524287 0.292517 0.769914 0.283315 
0.919026 0.525995 0.663227 0.064171 0.063096 
0.902208 0.539760 0.512535 0.039280 0.930810 

############################################

<INPUT>
0.840188 0.394383 0.783099
0.798440 0.911647 0.197551
0.335223 0.768230 0.277775
0.553970 0.477397 0.628871
0.364784 0.513401 0.952230
0.916195 0.635712 0.717297
0.141603 0.606969 0.016301
0.242887 0.137232 0.804177
0.156679 0.400944 0.129790
0.108809 0.998924 0.218257
0.512932 0.839112 0.612640
0.296032 0.637552 0.524287
0.493583 0.972775 0.292517
0.771358 0.526745 0.769914
0.400229 0.891529 0.283315
0.352458 0.807725 0.919026
0.069755 0.949327 0.525995
0.086056 0.192214 0.663227
0.890233 0.348893 0.064171
0.020023 0.457702 0.063096
0.238280 0.970634 0.902208
0.850920 0.266666 0.539760
0.375207 0.760249 0.512535
0.667724 0.531606 0.039280
0.437638 0.931835 0.930810

<OUTPUT>
RED
0.840188 0.798440 0.335223 0.553970 0.364784 
0.916195 0.141603 0.242887 0.156679 0.108809 
0.512932 0.296032 0.493583 0.771358 0.400229 
0.352458 0.069755 0.086056 0.890233 0.020023 
0.238280 0.850920 0.375207 0.667724 0.437638 

BLUE
0.840188 0.798440 0.335223 0.553970 0.364784 
0.916195 0.141603 0.242887 0.156679 0.108809 
0.512932 0.296032 0.493583 0.771358 0.400229 
0.352458 0.069755 0.086056 0.890233 0.020023 
0.238280 0.850920 0.375207 0.667724 0.437638 

GREEN
0.840188 0.798440 0.335223 0.553970 0.364784 
0.916195 0.141603 0.242887 0.156679 0.108809 
0.512932 0.296032 0.493583 0.771358 0.400229 
0.352458 0.069755 0.086056 0.890233 0.020023 
0.238280 0.850920 0.375207 0.667724 0.437638 

############################################

RED
0.840188 0.798440 0.335223 0.553970 0.364784 
0.916195 0.141603 0.242887 0.156679 0.108809 
0.512932 0.296032 0.493583 0.771358 0.400229 
0.352458 0.069755 0.086056 0.890233 0.020023 
0.238280 0.850920 0.375207 0.667724 0.437638 

BLUE
0.840188 0.798440 0.335223 0.553970 0.364784 
0.916195 0.141603 0.242887 0.156679 0.108809 
0.512932 0.296032 0.493583 0.771358 0.400229 
0.352458 0.069755 0.086056 0.890233 0.020023 
0.238280 0.850920 0.375207 0.667724 0.437638 

GREEN
0.840188 0.798440 0.335223 0.553970 0.364784 
0.916195 0.141603 0.242887 0.156679 0.108809 
0.512932 0.296032 0.493583 0.771358 0.400229 
0.352458 0.069755 0.086056 0.890233 0.020023 
0.238280 0.850920 0.375207 0.667724 0.437638 

############################################

RED
0.840188 0.798440 0.335223 0.553970 0.364784 
0.916195 0.141603 0.242887 0.156679 0.108809 
0.512932 0.296032 0.493583 0.771358 0.400229 
0.352458 0.069755 0.086056 0.890233 0.020023 
0.238280 0.850920 0.375207 0.667724 0.437638 

BLUE
0.840188 0.798440 0.335223 0.553970 0.364784 
0.916195 0.141603 0.242887 0.156679 0.108809 
0.512932 0.296032 0.493583 0.771358 0.400229 
0.352458 0.069755 0.086056 0.890233 0.020023 
0.238280 0.850920 0.375207 0.667724 0.437638 

GREEN
0.840188 0.798440 0.335223 0.553970 0.364784 
0.916195 0.141603 0.242887 0.156679 0.108809 
0.512932 0.296032 0.493583 0.771358 0.400229 
0.352458 0.069755 0.086056 0.890233 0.020023 
0.238280 0.850920 0.375207 0.667724 0.437638 

############################################

RED
0.672557 0.635879 0.460409 0.553413 0.610138 
0.756401 0.254958 0.394765 0.229138 0.441997 
0.654895 0.485957 0.586292 0.689339 0.525024 
0.693070 0.515026 0.313832 0.434432 0.180274 
0.703707 0.552449 0.549330 0.412870 0.766761 

BLUE
0.672557 0.635879 0.460409 0.553413 0.610138 
0.756401 0.254958 0.394765 0.229138 0.441997 
0.654895 0.485957 0.586292 0.689339 0.525024 
0.693070 0.515026 0.313832 0.434432 0.180274 
0.703707 0.552449 0.549330 0.412870 0.766761 

GREEN
0.672557 0.635879 0.460409 0.553413 0.610138 
0.756401 0.254958 0.394765 0.229138 0.441997 
0.654895 0.485957 0.586292 0.689339 0.525024 
0.693070 0.515026 0.313832 0.434432 0.180274 
0.703707 0.552449 0.549330 0.412870 0.766761 

############################################

RED
0.672557 0.635879 0.460409 0.553413 0.610138 
0.756401 0.254958 0.394765 0.229138 0.441997 
0.654895 0.485957 0.586292 0.689339 0.525024 
0.693070 0.515026 0.313832 0.434432 0.180274 
0.703707 0.552449 0.549330 0.412870 0.766761 

BLUE
0.672557 0.635879 0.460409 0.553413 0.610138 
0.756401 0.254958 0.394765 0.229138 0.441997 
0.654895 0.485957 0.586292 0.689339 0.525024 
0.693070 0.515026 0.313832 0.434432 0.180274 
0.703707 0.552449 0.549330 0.412870 0.766761 

GREEN
0.672557 0.635879 0.460409 0.553413 0.610138 
0.756401 0.254958 0.394765 0.229138 0.441997 
0.654895 0.485957 0.586292 0.689339 0.525024 
0.693070 0.515026 0.313832 0.434432 0.180274 
0.703707 0.552449 0.549330 0.412870 0.766761 

############################################

RED
0.672557 0.635879 0.460409 0.553413 0.610138 
0.756401 0.254958 0.394765 0.229138 0.441997 
0.654895 0.485957 0.586292 0.689339 0.525024 
0.693070 0.515026 0.313832 0.434432 0.180274 
0.703707 0.552449 0.549330 0.412870 0.766761 

BLUE
0.672557 0.635879 0.460409 0.553413 0.610138 
0.756401 0.254958 0.394765 0.229138 0.441997 
0.654895 0.485957 0.586292 0.689339 0.525024 
0.693070 0.515026 0.313832 0.434432 0.180274 
0.703707 0.552449 0.549330 0.412870 0.766761 

GREEN
0.672557 0.635879 0.460409 0.553413 0.610138 
0.756401 0.254958 0.394765 0.229138 0.441997 
0.654895 0.485957 0.586292 0.689339 0.525024 
0.693070 0.515026 0.313832 0.434432 0.180274 
0.703707 0.552449 0.549330 0.412870 0.766761 

############################################

RED
0.672557 0.635879 0.460409 0.553413 0.610138 
0.756401 0.254958 0.394765 0.229138 0.441997 
0.654895 0.485957 0.586292 0.689339 0.525024 
0.693070 0.515026 0.313832 0.434432 0.180274 
0.703707 0.552449 0.549330 0.412870 0.766761 

BLUE
0.672557 0.635879 0.460409 0.553413 0.610138 
0.756401 0.254958 0.394765 0.229138 0.441997 
0.654895 0.485957 0.586292 0.689339 0.525024 
0.693070 0.515026 0.313832 0.434432 0.180274 
0.703707 0.552449 0.549330 0.412870 0.766761 

GREEN
0.672557 0.635879 0.460409 0.553413 0.610138 
0.756401 0.254958 0.394765 0.229138 0.441997 
0.654895 0.485957 0.586292 0.689339 0.525024 
0.693070 0.515026 0.313832 0.434432 0.180274 
0.703707 0.552449 0.549330 0.412870 0.766761 

############################################

RED
0.840188 0.798440 0.335223 0.553970 0.364784 
0.916195 0.141603 0.242887 0.156679 0.108809 
0.512932 0.296032 0.493583 0.771358 0.400229 
0.352458 0.069755 0.086056 0.890233 0.020023 
0.238280 0.850920 0.375207 0.667724 0.437638 

BLUE
0.840188 0.798440 0.335223 0.553970 0.364784 
0.916195 0.141603 0.242887 0.156679 0.108809 
0.512932 0.296032 0.493583 0.771358 0.400229 
0.352458 0.069755 0.086056 0.890233 0.020023 
0.238280 0.850920 0.375207 0.667724 0.437638 

GREEN
0.840188 0.798440 0.335223 0.553970 0.364784 
0.916195 0.141603 0.242887 0.156679 0.108809 
0.512932 0.296032 0.493583 0.771358 0.400229 
0.352458 0.069755 0.086056 0.890233 0.020023 
0.238280 0.850920 0.375207 0.667724 0.437638 

############################################

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>


void pixelMean(float *r, float *g, float *b);



int main() {
    FILE *IMAGE;
    IMAGE = fopen("IMAGE","w+");
    if(IMAGE == NULL){
      perror("fopen");
    }
    FILE *INPUT;
    INPUT = fopen("INPUT","r");
    if(INPUT == NULL){
      perror("fopen");
    }
    FILE *OUTPUT;
    OUTPUT = fopen("OUTPUT","a");
    if(OUTPUT == NULL){
      perror("fopen");
    }
    
    float image[5][5][3];
    int x, y;
    
    
//    //###################//
//    //GENERATE IMAGE DATA//
//    srand(0);// Donâ€™t change this srand() line!
//    for(y = 0; y < 5; y++) {
//        for(x = 0; x < 5; x++) {
//            image[x][y][0] = (float)rand()/(float)INT_MAX;
//            image[x][y][1] = (float)rand()/(float)INT_MAX;
//            image[x][y][2] = (float)rand()/(float)INT_MAX;
//        } 
//    }
//    //###################//
    
   
   
   for (y = 0; y < 5; y++) {
       for (x = 0; x < 5; x++) {
           fscanf(INPUT,"%f %f %f\n", &image[x][y][0], &image[x][y][1], &image[x][y][2]);
       }
   }
    
    
    
    for (y = 0; y < 5; y++) {
        for (x = 0; x < 5; x++) {
            //pixelMean(&image[x][y][0], &image[x][y][1], &image[x][y][2]);
            
            printf("%d %d: ", x, y);
            printf("%f ",image[x][y][0]);
            printf("%f ",image[x][y][1]);
            printf("%f ",image[x][y][2]);
            printf("\n");
        }
    }
    
    
    
    //PRINT IMAGE TO IMAGE//
    fprintf(IMAGE,"RED\n"); for(y = 0; y < 5; y++){for(x = 0; x < 5; x++){
    fprintf(IMAGE,"%f ",image[x][y][0]);}fprintf(IMAGE,"\n");}fprintf(IMAGE,"\n");
    fprintf(IMAGE,"BLUE\n");for(y = 0; y < 5; y++){for(x = 0; x < 5; x++){
    fprintf(IMAGE,"%f ",image[x][y][1]);}fprintf(IMAGE,"\n");}fprintf(IMAGE,"\n");
    fprintf(IMAGE,"GREEN\n");for(y = 0; y < 5; y++){for(x = 0; x < 5; x++){
    fprintf(IMAGE,"%f ",image[x][y][2]);}fprintf(IMAGE,"\n");}
    fprintf(IMAGE,"\n############################################\n\n");
    //######################//
    
    //READ IMAGE FROM IMAGE//
    fscanf(IMAGE,"RED\n");for(y = 0; y < 5; y++){for(x = 0; x < 5; x++){
    fscanf(IMAGE,"%f ",&image[x][y][0]);}fscanf(IMAGE,"\n");}fscanf(IMAGE,"\n");
    fscanf(IMAGE,"BLUE\n");for(y = 0; y < 5; y++){for(x = 0; x < 5; x++){
    fscanf(IMAGE,"%f ",&image[x][y][1]);}fscanf(IMAGE,"\n");}fscanf(IMAGE,"\n");
    fscanf(IMAGE,"GREEN\n");for(y = 0; y < 5; y++){for(x = 0; x < 5; x++){
    fscanf(IMAGE,"%f ",&image[x][y][2]);}fscanf(IMAGE,"\n");}
    
    //###################//
    
    //code here
    
    //APPEND IMAGE TO OUTPUT//
    fprintf(OUTPUT,"RED\n"); for(y = 0; y < 5; y++){for(x = 0; x < 5; x++){
    fprintf(OUTPUT,"%f ",image[x][y][0]);}fprintf(OUTPUT,"\n");}fprintf(OUTPUT,"\n");
    fprintf(OUTPUT,"BLUE\n");for(y = 0; y < 5; y++){for(x = 0; x < 5; x++){
    fprintf(OUTPUT,"%f ",image[x][y][0]);}fprintf(OUTPUT,"\n");}fprintf(OUTPUT,"\n");
    fprintf(OUTPUT,"GREEN\n");for(y = 0; y < 5; y++){for(x = 0; x < 5; x++){
    fprintf(OUTPUT,"%f ",image[x][y][0]);}fprintf(OUTPUT,"\n");}
    fprintf(OUTPUT,"\n############################################\n\n");
    //######################//
    
    
    
    //CLOSE FILES//
    fclose(IMAGE);
    fclose(INPUT);
    fclose(OUTPUT);
    //###########//
    return 0;
}


void pixelMean(float *r, float *g, float *b) {
    
    int x, y;
    float greyscale = 0;
    
    for (y = 0; y < 5; y++) {
        for (x = 0; x < 5; x++) {
            greyscale = ((*r + *g + *b) / 3.0);
            *r = greyscale;
            *g = greyscale;
            *b = greyscale;
        }
    }
    
    return;
}

